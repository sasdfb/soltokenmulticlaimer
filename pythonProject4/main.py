import asyncio
import base58
from solders.pubkey import Pubkey
from solders.keypair import Keypair
from solders.transaction import Transaction
from solders.instruction import Instruction, AccountMeta
from solders.message import Message
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Confirmed, Processed
from solana.rpc.types import TxOpts
from spl.token.instructions import get_associated_token_address, create_associated_token_account
from colorama import Fore, Style

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º
TOKEN_PROGRAM_ID = Pubkey.from_string("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")
ASSOCIATED_TOKEN_PROGRAM_ID = Pubkey.from_string("ATokenGPu1xSph7v3fGaUthoxC7rsZGTmQPey5YRcWL")
SYS_PROGRAM_ID = Pubkey.from_string("11111111111111111111111111111111")


def load_private_keys(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
    with open(file_path, "r") as f:
        private_keys = [line.strip() for line in f if line.strip()]
    print(f"{Fore.GREEN}üîë –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(private_keys)} –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞ {file_path}{Style.RESET_ALL}")
    return private_keys


async def get_or_create_associated_token_account(client, payer, owner, mint):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç."""
    associated_token_address = get_associated_token_address(owner, mint)
    print(f"{Fore.CYAN}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è {owner} –∏ mint {mint}{Style.RESET_ALL}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
    account_info = await client.get_account_info(associated_token_address, commitment=Confirmed)
    if account_info.value is None:
        print(f"{Fore.YELLOW}‚ö†Ô∏è –ê—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è {owner} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.{Style.RESET_ALL}")
        create_instruction = create_associated_token_account(payer=payer, owner=owner, mint=mint)
        return associated_token_address, [create_instruction]

    print(f"{Fore.GREEN}‚úÖ –ê—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è {owner} –Ω–∞–π–¥–µ–Ω: {associated_token_address}{Style.RESET_ALL}")
    return associated_token_address, []


async def send_tokens(file_path, token_mint_str, to_address_str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å."""
    async with AsyncClient("https://api.mainnet-beta.solana.com") as client:
        print(f"{Fore.BLUE}üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç—É Solana...{Style.RESET_ALL}")
        private_keys = load_private_keys(file_path)
        to_pubkey = Pubkey.from_string(to_address_str)
        token_mint = Pubkey.from_string(token_mint_str)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ —Ç–æ–∫–µ–Ω–∞
        print(f"{Fore.CYAN}‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ mint: {token_mint}{Style.RESET_ALL}")
        token_info = await client.get_token_supply(token_mint, commitment=Confirmed)
        decimals = int(token_info.value.decimals)
        print(f"{Fore.MAGENTA}üî¢ Decimals for token: {decimals}{Style.RESET_ALL}")

        for pk in private_keys:
            print(f"{Fore.YELLOW}üîí –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: {pk[:5]}... (—Å–∫—Ä—ã—Ç–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏){Style.RESET_ALL}")
            # –°–æ–∑–¥–∞—ë–º Keypair –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            secret_key = base58.b58decode(pk)
            from_account = Keypair.from_bytes(secret_key)
            wallet_pubkey = from_account.pubkey()
            print(f"{Fore.GREEN}üëõ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—à–µ–ª—ë–∫: {wallet_pubkey}{Style.RESET_ALL}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            associated_token_address, create_account_instructions = await get_or_create_associated_token_account(
                client, wallet_pubkey, wallet_pubkey, token_mint
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            destination_associated_address, create_dest_instructions = await get_or_create_associated_token_account(
                client, wallet_pubkey, to_pubkey, token_mint
            )

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
            print(f"{Fore.BLUE}üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {associated_token_address}{Style.RESET_ALL}")
            balance_resp = await client.get_token_account_balance(associated_token_address, commitment=Confirmed)
            if balance_resp.value is None:
                print(f"{Fore.RED}‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ {wallet_pubkey} —Ä–∞–≤–µ–Ω 0.{Style.RESET_ALL}")
                continue

            amount = float(balance_resp.value.amount) / (10 ** balance_resp.value.decimals)
            print(f"{Fore.MAGENTA}üí∏ –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ {wallet_pubkey}: {amount}{Style.RESET_ALL}")

            if amount > 0:
                print(f"{Fore.YELLOW}‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ {amount} —Ç–æ–∫–µ–Ω–æ–≤ —Å {wallet_pubkey} –Ω–∞ {to_pubkey}...{Style.RESET_ALL}")
                # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤
                transfer_amount = int(amount * (10 ** decimals))
                print(f"{Fore.CYAN}üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ {transfer_amount} —Ç–æ–∫–µ–Ω–æ–≤ (–≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö){Style.RESET_ALL}")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                print(f"{Fore.BLUE}üîç –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {type(associated_token_address)}{Style.RESET_ALL}")
                print(f"{Fore.BLUE}üîç –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {type(destination_associated_address)}{Style.RESET_ALL}")
                transfer_instruction = Instruction(
                    program_id=TOKEN_PROGRAM_ID,
                    accounts=[
                        AccountMeta(pubkey=associated_token_address, is_signer=False, is_writable=True),
                        AccountMeta(pubkey=token_mint, is_signer=False, is_writable=False),
                        AccountMeta(pubkey=destination_associated_address, is_signer=False, is_writable=True),
                        AccountMeta(pubkey=wallet_pubkey, is_signer=True, is_writable=True),
                    ],
                    data=bytes([12]) + transfer_amount.to_bytes(8, byteorder="little") + decimals.to_bytes(1, byteorder="little")
                )

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                instructions = create_account_instructions + create_dest_instructions + [transfer_instruction]
                print(f"{Fore.GREEN}üìú –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(instructions)}{Style.RESET_ALL}")

                # –ü–æ–ª—É—á–∞–µ–º recent_blockhash
                print(f"{Fore.CYAN}üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞...{Style.RESET_ALL}")
                latest_blockhash_resp = await client.get_latest_blockhash(commitment=Confirmed)
                recent_blockhash_value = latest_blockhash_resp.value.blockhash
                print(f"{Fore.MAGENTA}üÜî –ü–æ–ª—É—á–µ–Ω recent_blockhash: {str(recent_blockhash_value)}{Style.RESET_ALL}")

                # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Message —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
                print(f"{Fore.YELLOW}‚úâÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏...{Style.RESET_ALL}")
                message = Message(instructions)
                print(f"{Fore.BLUE}üìã Message Header: {message.header}{Style.RESET_ALL}")
                print(f"{Fore.BLUE}üìã Account Keys: {message.account_keys}{Style.RESET_ALL}")

                # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Transaction
                print(f"{Fore.CYAN}üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...{Style.RESET_ALL}")
                transaction = Transaction([from_account], message, recent_blockhash_value)

                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                print(f"{Fore.YELLOW}‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...{Style.RESET_ALL}")
                transaction.sign([from_account], recent_blockhash_value)

                # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                serialized_tx = bytes(transaction)
                print(f"{Fore.GREEN}üîè –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {serialized_tx.hex()[:10]}... (—Å–∫—Ä—ã—Ç–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏){Style.RESET_ALL}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                try:
                    print(f"{Fore.CYAN}üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...{Style.RESET_ALL}")
                    response = await client.send_raw_transaction(serialized_tx, opts=TxOpts(skip_preflight=True, preflight_commitment=Processed))
                    print(f"{Fore.GREEN}‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {response}{Style.RESET_ALL}")
                except Exception as e:
                    print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ {wallet_pubkey} —Ä–∞–≤–µ–Ω 0.{Style.RESET_ALL}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
            print(f"{Fore.YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...{Style.RESET_ALL}")
            await asyncio.sleep(5)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    file_path = "private_keys.txt"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
    token_mint = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞: ")
    to_address = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ")

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    asyncio.run(send_tokens(file_path, token_mint, to_address))
